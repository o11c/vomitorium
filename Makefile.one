# CC and CXX are defaulted to support override-less including

CC ?= gcc
CFLAGS = -g -O2
CPPFLAGS =
CXX ?= g++
CXXFLAGS = -g -O2
LDFLAGS =
LDLIBS =

WARNINGS = -Werror -Wall -Wextra -Wmissing-declarations -Wredundant-decls
WARNINGS += -Wshadow
C_WARNINGS = -Wc++-compat -Wmissing-prototypes
CXX_WARNINGS =
CFLAGS += ${WARNINGS} ${C_WARNINGS}
CXXFLAGS += ${WARNINGS} ${CXX_WARNINGS}


SRC_DIR := $(patsubst %/,%,$(dir $(lastword ${MAKEFILE_LIST})))

GCC_PLUGIN_DIR := $(shell ${CC} -print-file-name=plugin)
GCC_VERSION = $(shell ${CC} -dumpversion)
GCC_VERSION_FULL = $(shell ${CC} --version | head -n 1)
GCC_MACHINE = $(shell ${CC} -dumpmachine)

override CPPFLAGS += -I ${SRC_DIR}/include

override CFLAGS += -fvisibility=hidden
override CXXFLAGS += -fvisibility=hidden

override CPPFLAGS += -MMD
override CPPFLAGS += -isystem ${GCC_PLUGIN_DIR}/include

override CFLAGS += -fPIC
override CFLAGS += -std=c99
override CXXFLAGS += -fPIC
override CXXFLAGS += -std=c++0x

# LOCAL_* defined per-target, to allow preventing inheritance
override CFLAGS += ${LOCAL_CFLAGS}
override CPPFLAGS += ${LOCAL_CPPFLAGS}
override CXXFLAGS += ${LOCAL_CXXFLAGS}
override LDFLAGS += ${LOCAL_LDFLAGS}
override LDLIBS += ${LOCAL_LDLIBS}


SOURCES = \
    dump.cpp \
    dump-v1.cpp \
    events.cpp \
    hello.c \
    init.cpp \
    iter.cpp \
    names.cpp \
    visit.cpp \
    weak.cpp \
    vomitorium.cpp
GOALS = lib/demo.so lib/vomitorium.so

all: ${GOALS}

clean:
	rm -rf lib/ obj/

info:
	@echo
	@echo 'Version (short): ${GCC_VERSION}'
	@echo 'Version (full): ${GCC_VERSION_FULL}'
	@echo 'Target (w/o -m): ${GCC_MACHINE}'
	@echo 'Plugins directory: ${GCC_PLUGIN_DIR}'
	@cd '${GCC_PLUGIN_DIR}' && ls -1 | sed -n 's/^/    /; s/\.so$$//p'
	@echo

test: test-frontends
#test-frontends: test-frontend-ada XXX rejects outputting to /dev/null
#test-frontends: test-frontend-brig XXX takes a binary format, empty file not valid
test-frontends: test-frontend-c
test-frontends: test-frontend-c++
test-frontends: test-frontend-objective-c
test-frontends: test-frontend-objective-c++
test-frontends: test-frontend-d
test-frontends: test-frontend-f95
test-frontends: test-frontend-go
#test-frontends: test-frontend-java XXX can't find a classpath?

EMPTY_FILE = ${SRC_DIR}/test-cases/empty
# Needs a real input file
#test-frontend-brig: EMPTY_FILE=${SRC_DIR}/test-cases/empty.brig
test-frontend-d: EMPTY_FILE=${SRC_DIR}/test-cases/empty.d
test-frontend-go: EMPTY_FILE=${SRC_DIR}/test-cases/empty.go
# Avoid a crash.
test-frontend-java: EMPTY_FILE=${SRC_DIR}/test-cases/empty.java

test-frontend-%: lib/vomitorium.so
# There are 2 errors we want to skip for:
# - frontend is not available for this compiler version
# - frontend is not installed
# If the frontend *is* installed, the first command's grep fails.
	${CC} -c -x $* ${EMPTY_FILE} -o /dev/null 2>&1 | grep -q -e 'language .* not recognized' -e 'error trying to exec .*: execvp: No such file or directory' || \
	    ${CC} -c -fplugin=lib/vomitorium.so -x $* ${EMPTY_FILE} -o /dev/null


test: test-use
test-use: lib/vomitorium.so
	${CC} -c -fplugin=lib/vomitorium.so -fplugin-arg-vomitorium-hello -fplugin-arg-vomitorium-info ${SRC_DIR}/test-cases/hello-world.c -c -o /dev/null
	${CXX} -x c++ -c -fplugin=lib/vomitorium.so -fplugin-arg-vomitorium-hello -fplugin-arg-vomitorium-info ${SRC_DIR}/test-cases/hello-world.c -c -o /dev/null
test: test-demo
test-demo: all
	${CC} -c -fplugin=lib/vomitorium.so -fplugin=lib/demo.so ${SRC_DIR}/test-cases/hello-world.c -o /dev/null
	${CC} -c -fplugin=lib/demo.so -fplugin=lib/vomitorium.so ${SRC_DIR}/test-cases/hello-world.c -o /dev/null >/dev/null 2>&1
	# Improper initialization should fail.
	! ${CC} -c -fplugin=lib/demo.so ${SRC_DIR}/test-cases/hello-world.c -o /dev/null >/dev/null 2>&1

test: test-void
test-void:
	! grep -q '()' ${SRC_DIR}/include/vomitorium.h

test: test-dump
test-dump: test-dump.xml
test-dump.xml: lib/vomitorium.so
	# TODO test dumps for multiple languages
	${CC} -c -fplugin=lib/vomitorium.so -fplugin-arg-vomitorium-dump -fplugin-arg-vomitorium-output=$@ ${SRC_DIR}/test-cases/hello-world.c -o /dev/null

# Don't force re-linking demo.so when vomitorium.so changes.
lib/demo.so: | lib/vomitorium.so
lib/demo.so: LOCAL_LDFLAGS='-Wl,-rpath=$${ORIGIN}'
lib/demo.so: LOCAL_LDLIBS=lib/vomitorium.so
lib/vomitorium.so: LOCAL_LDFLAGS=
lib/vomitorium.so: LOCAL_LDLIBS=
lib/vomitorium.so: $(patsubst %,obj/%.o,${SOURCES})

# General-purpose Rules

.SECONDARY:
.SUFFIXES:
.DELETE_ON_ERROR:

obj/%.c.o: ${SRC_DIR}/src/%.c
	@mkdir -p ${@D}
	${CC} ${CFLAGS} ${CPPFLAGS} -c -o $@ $<
obj/%.cpp.o: ${SRC_DIR}/src/%.cpp
	@mkdir -p ${@D}
	${CXX} ${CXXFLAGS} ${CPPFLAGS} -c -o $@ $<

lib/%.so: obj/%.c.o
	@mkdir -p ${@D}
	${CC} -shared ${LDFLAGS} $^ ${LDLIBS} -o $@
lib/%.so: obj/%.cpp.o
	@mkdir -p ${@D}
	${CXX} -shared ${LDFLAGS} $^ ${LDLIBS} -o $@

-include obj/*.d
